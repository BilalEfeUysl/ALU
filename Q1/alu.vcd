$date
	Sat Apr 12 01:59:46 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_alu $end
$var wire 32 ! result [31:0] $end
$var reg 3 " ALUControl [2:0] $end
$var reg 32 # a [31:0] $end
$var reg 32 $ b [31:0] $end
$scope module uut $end
$var wire 3 % ALUControl [2:0] $end
$var wire 32 & a [31:0] $end
$var wire 32 ' b [31:0] $end
$var wire 32 ( xorResult [31:0] $end
$var wire 32 ) subResult [31:0] $end
$var wire 32 * sltResult [31:0] $end
$var wire 32 + result [31:0] $end
$var wire 32 , andResult [31:0] $end
$var wire 32 - addResult [31:0] $end
$scope module add_inst $end
$var wire 32 . a [31:0] $end
$var wire 32 / b [31:0] $end
$var wire 32 0 result [31:0] $end
$var wire 1 1 subtract $end
$upscope $end
$scope module and_inst $end
$var wire 32 2 a [31:0] $end
$var wire 32 3 b [31:0] $end
$var wire 32 4 result [31:0] $end
$upscope $end
$scope module mux_inst $end
$var wire 32 5 addResult [31:0] $end
$var wire 32 6 andResult [31:0] $end
$var wire 3 7 sel [2:0] $end
$var wire 32 8 xorResult [31:0] $end
$var wire 32 9 subResult [31:0] $end
$var wire 32 : sltResult [31:0] $end
$var reg 32 ; result [31:0] $end
$upscope $end
$scope module slt_inst $end
$var wire 32 < a [31:0] $end
$var wire 32 = b [31:0] $end
$var wire 32 > result [31:0] $end
$upscope $end
$scope module sub_inst $end
$var wire 32 ? a [31:0] $end
$var wire 32 @ b [31:0] $end
$var wire 32 A result [31:0] $end
$var wire 1 B subtract $end
$upscope $end
$scope module xor_inst $end
$var wire 32 C a [31:0] $end
$var wire 32 D b [31:0] $end
$var wire 32 E result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b100 E
b1000 D
b1100 C
1B
b100 A
b1000 @
b1100 ?
b0 >
b1000 =
b1100 <
b10100 ;
b0 :
b100 9
b100 8
b0 7
b1000 6
b10100 5
b1000 4
b1000 3
b1100 2
01
b10100 0
b1000 /
b1100 .
b10100 -
b1000 ,
b10100 +
b0 *
b100 )
b100 (
b1000 '
b1100 &
b0 %
b1000 $
b1100 #
b0 "
b10100 !
$end
#10000
b100 ,
b100 4
b100 6
b1111 !
b1111 +
b1111 ;
b10001 (
b10001 8
b10001 E
b1 "
b1 %
b1 7
b101 $
b101 '
b101 /
b101 3
b101 =
b101 @
b101 D
b11001 -
b11001 0
b11001 5
b1111 )
b1111 9
b1111 A
b10100 #
b10100 &
b10100 .
b10100 2
b10100 <
b10100 ?
b10100 C
#20000
b0 ,
b0 4
b0 6
b0 !
b0 +
b0 ;
b11111111111111111111111111111111 (
b11111111111111111111111111111111 8
b11111111111111111111111111111111 E
b10 "
b10 %
b10 7
b1111000011110000111100001111 $
b1111000011110000111100001111 '
b1111000011110000111100001111 /
b1111000011110000111100001111 3
b1111000011110000111100001111 =
b1111000011110000111100001111 @
b1111000011110000111100001111 D
b11111111111111111111111111111111 -
b11111111111111111111111111111111 0
b11111111111111111111111111111111 5
b11100001111000011110000111100001 )
b11100001111000011110000111100001 9
b11100001111000011110000111100001 A
b11110000111100001111000011110000 #
b11110000111100001111000011110000 &
b11110000111100001111000011110000 .
b11110000111100001111000011110000 2
b11110000111100001111000011110000 <
b11110000111100001111000011110000 ?
b11110000111100001111000011110000 C
#30000
b10001000000101010001010000 ,
b10001000000101010001010000 4
b10001000000101010001010000 6
b10111000100111100000001100101101 !
b10111000100111100000001100101101 +
b10111000100111100000001100101101 ;
b10111000100111100000001100101101 (
b10111000100111100000001100101101 8
b10111000100111100000001100101101 E
b11 "
b11 %
b11 7
b10010001101000101011001111000 $
b10010001101000101011001111000 '
b10010001101000101011001111000 /
b10010001101000101011001111000 3
b10010001101000101011001111000 =
b10010001101000101011001111000 @
b10010001101000101011001111000 D
b10111100110111101010101111001101 -
b10111100110111101010101111001101 0
b10111100110111101010101111001101 5
b10011000011101011111111011011101 )
b10011000011101011111111011011101 9
b10011000011101011111111011011101 A
b10101010101010100101010101010101 #
b10101010101010100101010101010101 &
b10101010101010100101010101010101 .
b10101010101010100101010101010101 2
b10101010101010100101010101010101 <
b10101010101010100101010101010101 ?
b10101010101010100101010101010101 C
#40000
b0 ,
b0 4
b0 6
b1 *
b1 :
b1 >
b1 !
b1 +
b1 ;
b1111 (
b1111 8
b1111 E
b101 "
b101 %
b101 7
b1010 $
b1010 '
b1010 /
b1010 3
b1010 =
b1010 @
b1010 D
b1111 -
b1111 0
b1111 5
b11111111111111111111111111111011 )
b11111111111111111111111111111011 9
b11111111111111111111111111111011 A
b101 #
b101 &
b101 .
b101 2
b101 <
b101 ?
b101 C
#50000
